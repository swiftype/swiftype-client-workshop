=begin
#Swiftype App Search API

#Swiftype App Search API

OpenAPI spec version: 0.1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module SwiftypeAppSearch
  class SynonymsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Create a Synonym Set
    # 
    # @param engine_name Name of engine
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [SynonymSet]
    def create_synonym(engine_name, body, opts = {})
      data, _status_code, _headers = create_synonym_with_http_info(engine_name, body, opts)
      return data
    end

    # Create a Synonym Set
    # 
    # @param engine_name Name of engine
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SynonymSet, Fixnum, Hash)>] SynonymSet data, response status code and response headers
    def create_synonym_with_http_info(engine_name, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SynonymsApi.create_synonym ..."
      end
      # verify the required parameter 'engine_name' is set
      if @api_client.config.client_side_validation && engine_name.nil?
        fail ArgumentError, "Missing the required parameter 'engine_name' when calling SynonymsApi.create_synonym"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling SynonymsApi.create_synonym"
      end
      # resource path
      local_var_path = "/engines/{engine_name}/synonyms".sub('{' + 'engine_name' + '}', engine_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SynonymSet')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SynonymsApi#create_synonym\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Destroy a Synonym Set
    # 
    # @param id Id of synonym set
    # @param engine_name Name of engine
    # @param [Hash] opts the optional parameters
    # @return [DeletedStatus]
    def destroy_synonym(id, engine_name, opts = {})
      data, _status_code, _headers = destroy_synonym_with_http_info(id, engine_name, opts)
      return data
    end

    # Destroy a Synonym Set
    # 
    # @param id Id of synonym set
    # @param engine_name Name of engine
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeletedStatus, Fixnum, Hash)>] DeletedStatus data, response status code and response headers
    def destroy_synonym_with_http_info(id, engine_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SynonymsApi.destroy_synonym ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SynonymsApi.destroy_synonym"
      end
      # verify the required parameter 'engine_name' is set
      if @api_client.config.client_side_validation && engine_name.nil?
        fail ArgumentError, "Missing the required parameter 'engine_name' when calling SynonymsApi.destroy_synonym"
      end
      # resource path
      local_var_path = "/engines/{engine_name}/synonyms/{id}".sub('{' + 'id' + '}', id.to_s).sub('{' + 'engine_name' + '}', engine_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DeletedStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SynonymsApi#destroy_synonym\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a single Synonym Set
    # 
    # @param id Id of synonym set
    # @param engine_name Name of engine
    # @param [Hash] opts the optional parameters
    # @return [SynonymSet]
    def get_synonym(id, engine_name, opts = {})
      data, _status_code, _headers = get_synonym_with_http_info(id, engine_name, opts)
      return data
    end

    # Get a single Synonym Set
    # 
    # @param id Id of synonym set
    # @param engine_name Name of engine
    # @param [Hash] opts the optional parameters
    # @return [Array<(SynonymSet, Fixnum, Hash)>] SynonymSet data, response status code and response headers
    def get_synonym_with_http_info(id, engine_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SynonymsApi.get_synonym ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SynonymsApi.get_synonym"
      end
      # verify the required parameter 'engine_name' is set
      if @api_client.config.client_side_validation && engine_name.nil?
        fail ArgumentError, "Missing the required parameter 'engine_name' when calling SynonymsApi.get_synonym"
      end
      # resource path
      local_var_path = "/engines/{engine_name}/synonyms/{id}".sub('{' + 'id' + '}', id.to_s).sub('{' + 'engine_name' + '}', engine_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SynonymSet')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SynonymsApi#get_synonym\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all Synonym Sets for an Engine
    # 
    # @param engine_name Name of engine
    # @param [Hash] opts the optional parameters
    # @option opts [Page] :body 
    # @return [InlineResponse200]
    def get_synonyms(engine_name, opts = {})
      data, _status_code, _headers = get_synonyms_with_http_info(engine_name, opts)
      return data
    end

    # Get all Synonym Sets for an Engine
    # 
    # @param engine_name Name of engine
    # @param [Hash] opts the optional parameters
    # @option opts [Page] :body 
    # @return [Array<(InlineResponse200, Fixnum, Hash)>] InlineResponse200 data, response status code and response headers
    def get_synonyms_with_http_info(engine_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SynonymsApi.get_synonyms ..."
      end
      # verify the required parameter 'engine_name' is set
      if @api_client.config.client_side_validation && engine_name.nil?
        fail ArgumentError, "Missing the required parameter 'engine_name' when calling SynonymsApi.get_synonyms"
      end
      # resource path
      local_var_path = "/engines/{engine_name}/synonyms".sub('{' + 'engine_name' + '}', engine_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse200')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SynonymsApi#get_synonyms\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
